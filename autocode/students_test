package coverage

import (
	"os"
	"testing"
	"time"
)

// DO NOT EDIT THIS FUNCTION
func init() {
	content, err := os.ReadFile("students_test.go")
	if err != nil {
		panic(err)
	}
	err = os.WriteFile("autocode/students_test", content, 0644)
	if err != nil {
		panic(err)
	}
}

// WRITE YOUR CODE BELOW

func TestLen(t *testing.T) {
	testCases := []struct {
		name  string
		input People
	}{
		{
			name:  "Length is nil",
			input: nil,
		},
		{
			name:  "Length is 0",
			input: make(People, 0),
		},
		{
			name:  "Length is 100",
			input: make(People, 100),
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			if len(testCase.input) != testCase.input.Len() {
				t.Errorf("got: %v, want: %v", testCase.input.Len(), len(testCase.input))
			}
		})
	}
}

func TestLess(t *testing.T) {
	people := People{
		Person{firstName: "A", lastName: "B", birthDay: time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)},
		Person{firstName: "B", lastName: "Z", birthDay: time.Date(2000, 2, 1, 0, 0, 0, 0, time.UTC)},
		Person{firstName: "G", lastName: "D", birthDay: time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)},
		Person{firstName: "G", lastName: "E", birthDay: time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)},
	}

	testCases := []struct {
		name  string
		input People
		i     int
		j     int
		want  bool
	}{
		{
			name:  "Person is less by birthday",
			input: people,
			i:     1,
			j:     0,
			want:  true,
		},
		{
			name:  "Person is not less by birthday",
			input: people,
			i:     0,
			j:     1,
			want:  false,
		},
		{
			name:  "Person is less by firstname",
			input: people,
			i:     0,
			j:     2,
			want:  true,
		},
		{
			name:  "Person is not less by firstname",
			input: people,
			i:     2,
			j:     0,
			want:  false,
		},
		{
			name:  "Person is less by lastname",
			input: people,
			i:     2,
			j:     3,
			want:  true,
		},
		{
			name:  "Person is not less by lastname",
			input: people,
			i:     3,
			j:     2,
			want:  false,
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			if testCase.want != testCase.input.Less(testCase.i, testCase.j) {
				t.Errorf("got: %v, want: %v", testCase.input.Less(testCase.i, testCase.j), testCase.want)
			}
		})
	}
}

func TestSwap(t *testing.T) {
	people := People{
		Person{firstName: "A", lastName: "B", birthDay: time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)},
		Person{firstName: "B", lastName: "Z", birthDay: time.Date(2000, 2, 1, 0, 0, 0, 0, time.UTC)},
	}

	testCases := []struct {
		name  string
		input People
		i     int
		j     int
		want  Person
	}{
		{
			name:  "Person B must be first",
			input: people,
			i:     0,
			j:     1,
			want:  Person{firstName: "B", lastName: "Z", birthDay: time.Date(2000, 2, 1, 0, 0, 0, 0, time.UTC)},
		},
		{
			name:  "Person A must be first",
			input: people,
			i:     0,
			j:     1,
			want:  Person{firstName: "A", lastName: "B", birthDay: time.Date(2000, 1, 1, 0, 0, 0, 0, time.UTC)},
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			testCase.input.Swap(testCase.i, testCase.j)

			if testCase.want != people[0] {
				t.Errorf("got: %v, want: %v", testCase.input.Less(testCase.i, testCase.j), testCase.want)
			}
		})
	}
}

func TestSet(t *testing.T) {
	testCases := []struct {
		name  string
		input string
		row   int
		col   int
		value int
		want  bool
	}{
		{
			name:  "Row is negative",
			input: "0 1 2 3",
			row:   -1,
			col:   0,
			value: 0,
			want:  false,
		},
		{
			name:  "Column is negative",
			input: "0 1 2 3",
			row:   0,
			col:   -1,
			value: 0,
			want:  false,
		},
		{
			name:  "Row is out of range",
			input: "0 1 2 3",
			row:   1,
			col:   0,
			value: 0,
			want:  false,
		},
		{
			name:  "Column is out of range",
			input: "0 1 2 3",
			row:   0,
			col:   4,
			value: 0,
			want:  false,
		},
		{
			name:  "One row",
			input: "0 1 2 3",
			row:   0,
			col:   1,
			value: 4,
			want:  true,
		},
		{
			name:  "Three rows",
			input: "0 1 2\n3 4 5\n6 7 8",
			row:   2,
			col:   2,
			value: 9,
			want:  true,
		},
	}

	for _, testCase := range testCases {
		t.Run(testCase.name, func(t *testing.T) {
			actual, _ := New(testCase.input)
			got := actual.Set(testCase.row, testCase.col, testCase.value)

			if testCase.want != got {
				t.Errorf("got: %v, want: %v", got, testCase.want)
			}
		})
	}
}
